#!/usr/bin/env ruby
# frozen_string_literal: true

require 'octodown'
require 'octodown/support/file_chooser'
require 'octodown/support/logger'
require 'optparse'
require 'launchy'
# Default options
options = {
  port: 8887,
  presenter: :server,
  style: :github,
  stdin: false,
  logger: Octodown::Support::Logger.build,
  no_open: false
}

OptionParser.new do |opts|
  opts.banner = 'Usage: octodown [options]'

  opts.on_tail '--version', 'Show version' do
    puts "octodown v#{Octodown::VERSION}"
    exit
  end

  opts.on(
    '-s', '--style [STYLE]', %i[github atom], 'Choose style (atom, github)'
  ) do |s|
    options[:style] = s
  end

  opts.on '--stdin', 'Read from STDIN' do
    options[:stdin] = true
  end

  opts.on '--quiet', 'Shhhh.. keep quiet' do
    options[:logger].level = Logger::FATAL
  end

  opts.on '--debug', 'Debug the gem' do
    ENV['LISTEN_GEM_DEBUGGING'] = '2'
    options[:logger].level = Logger::DEBUG
  end

  opts.on '-r', '--raw', 'Print raw HTML to STDOUT' do
    options[:presenter] = :raw
  end

  opts.on '-l', '--live-reload', 'Start a LiveReload server' do
    options[:presenter] = :server
  end

  opts.on '-h', '--html', 'Render to HTML' do
    options[:presenter] = :html
  end

  opts.on(
    '-P', '--port [PORT]', "LiveReload port (default: #{options[:port]})"
  ) do |port|
    options[:presenter] = :server
    options[:port] = port.to_i
  end

  opts.on_tail '-h', '--help', 'Show this message' do
    puts opts
    exit
  end

  opts.on '--no-open', 'Do not open the browser' do
    options[:no_open] = true
  end
end.parse!

options[:file] = if ARGF.file == STDIN && options[:stdin]
                   STDIN
                 elsif ARGF.file != STDIN
                   ARGF.file
                 else
                   Octodown::FileChooser.new(logger: options[:logger]).call
                 end

Octodown.call options
